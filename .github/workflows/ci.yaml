name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 0 * * SUN"

defaults:
  run:
    shell: bash  # Avoid PowerShell on Windows

jobs:
  lint_and_test:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - 3.8
          - 3.9
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup Node (for PyRight)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Install Poetry
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
            echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          else
            curl -sSL https://install.python-poetry.org | python3 - --version 1.1.11
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi
      - name: Install Python Requirements
        run: poetry install -E all
      - name: Run Linter
        run: poetry run flake8 || echo "::warning::Failure ignored!"
      - name: Run Type Checks
        run: |
          npm install -g pyright
          pyright || echo "::warning::Failure ignored!"
      - name: Run Tests
        run: poetry run pytest --cov=mnemocards --cov-report=xml
      - name: Build Wheel
        run: poetry build
      - name: Upload Wheel to GitHub Artifact
        uses: actions/upload-artifact@v2
        with:
          path: dist/
      - name: Upload Coverage
        uses: codecov/codecov-action@v2

  build_docs:
    name: Build Docs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - 3.8
          - 3.9
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
            echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          else
            curl -sSL https://install.python-poetry.org | python3 - --version 1.1.11
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi
      - name: Install Python Requirements
        run: poetry install -E all
      - name: Build Docs
        run: poetry run mkdocs build
      - name: Upload Docs to GitHub Artifact
        uses: actions/upload-artifact@v2
        with:
          path: site/

  deploy:
    name: Deploy
    needs:
      - lint_and_test
      - build_docs
        #if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: set up python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Get Dist Artifact
        uses: actions/download-artifact@v2
        with:
          path: dist
      - name: Get Docs Artifact
        uses: actions/download-artifact@v2
        with:
          path: site
      - name: Install Poetry
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
            echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          else
            curl -sSL https://install.python-poetry.org | python3 - --version 1.1.11
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi
      - name: Install Python Requirements
        run: poetry install -E all
      - name: Publish Docs
        run: poetry run mkdocs gh-deploy --force
      - name: Publish PyPi
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish

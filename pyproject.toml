[tool.poetry]
name = "mnemocards"
version = "1.0.0b0"
description = "In addition to helping you memorise, this code helps you do other things that I don't remember..."
packages = [
    { include = "mnemocards", from = "src" },
    { include = "mnemocards_essentials", from = "src" },
    { include = "mnemocards_anki", from = "src" },
]
authors = ["guiferviz <guiferviz@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = ["mnemocards"]
repository = "https://github.com/guiferviz/mnemocards"
classifiers = [
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/guiferviz/mnemocards/issues"
"Source" = "https://github.com/guiferviz/mnemocards"
"Documentation" = "https://guiferviz.github.io/mnemocards"

[tool.poetry.dependencies]
python = "^3.10"
fire = "^0.5.0"
rich = "^13.3.4"
pydantic = "^1.10.7"
pyyaml = "^6.0"
gtts = "^2.3.1"
toml = "^0.10.2"
xmltodict = "^0.13.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pytest-html = "^3.2.0"

[tool.poetry.group.lint.dependencies]
pre-commit = "^3.2.2"
black = "^23.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
pyright = "^1.1.303"
pdbpp = "^0.10.3"
mypy = "^1.2.0"
flake8-pyproject = "^1.2.3"
pydocstyle = "^6.3.0"
pep8-naming = "^0.13.3"

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.1.6"
mkdocstrings = {extras = ["python"], version = "^0.21.2"}
mkdocs-charts-plugin = "^0.0.8"
mkdocs-macros-plugin = "^0.7.0"
mkdocs-section-index = "^0.3.5"

[tool.poetry.group.anki.dependencies]
anki = "^2.1.61"
genanki-mnemocards = "^0.13.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
"mnemocards" = "mnemocards.__main__:main"

[tool.black]
line-length = 80

[tool.isort]
profile = "black"
line_length = 80

[tool.pyright]
include = ["src"]
exclude = []

[tool.mypy]
exclude = []
plugins = [
    "pydantic.mypy"
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = false

[tool.coverage.report]
# Regexes for lines to exclude from coverage
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "except ImportError",
]

[tool.flake8]
per-file-ignores = [
    # Imported but unused.
    "__init__.py:F401",
]
exclude = [
    ".git",
    "__pycache__",
]
extend-ignore = [
    # Indentation — black handles
    "E1",
    "W1",
    # Whitespace — black handles
    "E2",
    "W2",
    # Blank lines — black handles
    "E3",
    "W3",
    # Imports — isort handles
    "E4",
    "W4",
    # Line length — black handles
    "E5",
    "W5",
]
max-line-length = 100
# Print the total number of errors.
count = true
# Print the source code generating the error/warning in question.
show-source = true
# Count the number of occurrences of each error/warning code and print a report.
statistics = true
# Consider pydantic validator as a classmethod decorator to avoid this error:
# N805 first argument of a method should be named 'self'
classmethod-decorators = [
    "classmethod",
    "validator",
    "root_validator",
]

[tool.pydocstyle]
convention = "google"
add_ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method (Python dunder method)
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
]
